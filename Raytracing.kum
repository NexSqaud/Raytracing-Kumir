использовать Рисователь
использовать Файлы

| удаление значения
лог _

|| Константы
вещ эпсилон = 0.0000001

|| Настройки

цел количествоСтрокМеждуПрогрессом = 20

| настройки холста
цел ширина = 1920
цел высота = 1080

| настройки плоскости проекции
вещ ширинаПлПр = 1.6
вещ высотаПлПр = 0.9
вещ расстояниеДоПлПр = 1

| настройки рендера
цвет цветДоРендера; цветДоРендера := серый
цвет цветФона; цветФона := голубой 

| максимальное количество фигур на сцене (с учетом источников света)
цел максимумФигур = 500

| Ambient освещение, уровень минимального освещения
вещ общееОсвещение = 15

| Runtime-переменные  
лит таб фигуры[0:максимумФигур]
лог естьОсвещение = нет
цел числоФигур = 0

алг
нач
новый лист(ширина, высота, цветДоРендера)

цел врем
врем := время

| настройка сцены
| сумма всех освещений не должна превышать 100 (с учетом ambient)

сфера(0, 0, 5, 2, серый)
сфера(-0.5, -2, 5, 1, зеленый)
сфера(5, -1, 10, 2, белый)
сфера(0, 6001, 10, 6000, красный) | выступает в качестве пола
objМодель("duck.obj", -10, 3, 20)

лампа(5, -5, -1, 35)
лампа(-5, -5, -1, 50)

| рендеринг

цел x, y, врем2
нц для y от 0 до высота
нц для x от 0 до ширина
выпуститьЛуч(x, y)
если mod(x, количествоСтрокМеждуПрогрессом) = 0 и x <> 0 и y = 0 то
врем2 := время
вывод "Рендеринг ", y ," строк занял: ", врем2 - врем, " мс (", int((врем2 - врем) / 1000), " с)", нс
все
кц
кц

цел времяВсего
врем2 := время
времяВсего := врем2 - врем

вывод "Рендеринг занял: ", времяВсего, " мс (", int(времяВсего / 1000), " с)", нс

кон

алг выпуститьЛуч(цел x, y)
нач
вещ xv, yv, zv, xn, yn, zn, t
цвет цв
лит фигур
цел тип
xv := ((x - ширина / 2) * ширинаПлПр / ширина)
yv := ((y - высота / 2) * высотаПлПр / высота)
zv := расстояниеДоПлПр
нормализацияВектора(xv, yv, zv, xv, yv, zv)
t := 0
если столкновениеЛучаСБлижайшейФигурой(0, 0, 0, xv, yv, zv, 0.001, t, xn, yn, zn, фигур, цв)
то
если естьОсвещение то
цв := умнЦвет(цв, освещенностьСферы(0, 0, 0, xv, yv, zv, xn, yn, zn, t) / 100)
все
пиксель(x, y, цв)
иначе
пиксель(x, y, цветФона)
все
кон

алг лог столкновениеЛучаСБлижайшейФигурой(вещ xo, yo, zo, xv, yv, zv, tmin, аргрез вещ t, xn, yn, zn, рез лит фигур, рез цвет цв)
нач
вещ tTemp, xnt, ynt, znt
цел i, тип
лит фигурTemp
t := МАКСВЕЩ
знач := нет
нц для i от 0 до числоФигур - 1
фигурTemp := фигуры[i]
тип := типФигуры(фигурTemp)

выбор
при тип = 0:
если столкновениеСоСферой(фигурTemp, xv, yv, zv, xo, yo, zo, tmin, tTemp, xnt, ynt, znt) то
если tTemp < t и tTemp > tmin то
t := tTemp
фигур := фигурTemp
цв := цветСферы(фигурTemp)
xn := xnt
yn := ynt
zn := znt
знач := да
все
все
при тип = 2:
если столкновениеСМоделью(фигурTemp, xv, yv, zv, xo, yo, zo, tmin, tTemp, xnt, ynt, znt) то
если tTemp < t и tTemp > tmin то
t := tTemp
фигур := фигурTemp
цв := желтый | TODO: цвет модели
xn := xnt
yn := ynt
zn := znt
знач := да
все
все
все
кц

кон

алг лог столкновениеСоСферой(лит сфер, вещ xv, yv, zv, xo, yo, zo, tmin, аргрез вещ t, xn, yn, zn)
нач
вещ xc, yc, zc, xoc, yoc, zoc, k1, k2, k3, d, t1, радиус
радиус := радиусСферы(сфер)
положениеФигуры(сфер, xc, yc, zc)

xoc := xo - xc
yoc := yo - yc;
zoc := zo - zc

k1 := dot(xv, yv, zv, xv, yv, zv)
k2 := 2 * dot(xoc, yoc, zoc, xv, yv, zv)
k3 := dot(xoc, yoc, zoc, xoc, yoc, zoc) - радиус * радиус

d := k2 * k2 - 4 * k1 * k3
если d < 0 то
знач := нет
выход
все

t := (-k2 + sqrt(d)) / (2 * k1)
t1 := (-k2 - sqrt(d)) / (2 * k1)
если t1 < t и t1 > tmin то t := t1 все

вещ xt, yt, zt

xt := xo + (xv * t)
yt := yo + (yv * t)
zt := zo + (zv * t)

xn := xt - xc
yn := yt - yc
zn := zt - zc

нормализацияВектора(xn, yn, zn, xn, yn, zn)

знач := да
кон

алг лог столкновениеСМоделью(лит модель, вещ xv, yv, zv, xo, yo, zo, tmin, рез вещ t, xn, yn, zn)
нач
цел индекс, колПолигонов, раздел, раздел2
вещ ox, oy, oz, tTemp, xnt, ynt, znt

положениеФигуры(модель, ox, oy, oz)
раздел := поз подряд(2, модель, ";") + 1
раздел2 := поз после(раздел, модель, ";") - 1
колПолигонов := лвц(модель[раздел:раздел2])

раздел := поз подряд(3, модель, ";") + 2

знач := нет

нц для индекс от 0 до колПолигонов
раздел2 := поз после(раздел, модель, "]") - 1
если столкновениеСПолигоном(модель[раздел:раздел2], ox, oy, oz, xv, yv, zv, xo, yo, zo, tmin, tTemp, xnt, ynt, znt) то
если tTemp < t то
t := tTemp
xn := xnt
yn := ynt
zn := znt
знач := да
все
все
кц
кон

алг лог столкновениеСПолигоном(лит полигон, вещ ox, oy, oz, xv, yv, zv, xo, yo, zo, tmin, рез вещ t, xn, yn, zn)
нач
вещ таб вершины[0:3, 0:3]
вещ x, y, z
цел раздел, раздел2
раздел := 1
раздел2 := поз подряд(3, полигон, ",") - 1
десПозиции(полигон[раздел:раздел2], x, y, z)
вершины[0, 0] := x
вершины[0, 1] := y
вершины[0, 2] := z

раздел := раздел2
раздел2 := поз подряд(6, полигон, ",") - 1
десПозиции(полигон[раздел:раздел2], x, y, z)
вершины[1, 0] := x
вершины[1, 1] := y
вершины[1, 2] := z

раздел := раздел2
раздел2 := поз подряд(9, полигон, ",") - 1
десПозиции(полигон[раздел:раздел2], x, y, z)
вершины[2, 0] := x
вершины[2, 1] := y
вершины[2, 2] := z

вещ гран1x, гран1y, гран1z 
гран1x := вершины[1, 0] - вершины[0, 0]
гран1y := вершины[1, 1] - вершины[0, 1]
гран1z := вершины[1, 2] - вершины[0, 2]

вещ гран2x, гран2y, гран2z
гран2x := вершины[2, 0] - вершины[0, 0]
гран2y := вершины[2, 1] - вершины[0, 1]
гран2z := вершины[2, 2] - вершины[0, 2]

вещ px, py, pz
cross(xv, yv, zv, гран2x, гран2y, гран2z, px, py, pz)

вещ det
det := dot(гран1x, гран1y, гран1z, px, py, pz)
если abs(det) < эпсилон то
знач := нет
выход
все

вещ tvx, tvy, tvz
tvx := xo - (вершины[0, 0] + ox)
tvy := yo - (вершины[0, 0] + oy)
tvz := zo - (вершины[0, 0] + oz)

вещ u
u := dot(tvx, tvy, tvz, px, py, pz) / det

если u < 0 или u > 1 то
знач := нет
выход
все

вещ qvx, qvy, qvz
cross(tvx, tvy, tvz, гран1x, гран1y, гран1z, qvx, qvy, qvz)

вещ v
v := dot(xv, yv, zv, qvx, qvy, qvz) / det

если v < 0 или u + v > 1 то
знач := нет
выход
все

t := dot(гран2x, гран2y, гран2z, qvx, qvy, qvz) / det

раздел := раздел2 + 2
раздел2 := длин(полигон)
десПозиции(полигон[раздел:раздел2], xn, yn, zn)

знач := да
кон

алг вещ освещенностьСферы(вещ xo, yo, zo, xv, yv, zv, xn, yn, zn, t)
нач
вещ xt, yt, zt, xtv, ytv, ztv, xl, yl, zl, суммаОсвещений
цел i
лит свет

суммаОсвещений := общееОсвещение

xt := xo + (xv * t)
yt := yo + (yv * t)
zt := zo + (zv * t)

нц для i от 0 до числоФигур - 1
свет := фигуры[i]
если типФигуры(свет) = 1 то
положениеФигуры(свет, xl, yl, zl)
xtv := xl - xt
ytv := yl - yt;
ztv := zl - zt
нормализацияВектора(xtv, ytv, ztv, xtv, ytv, ztv)

если не точкаЗатенена(xt, yt, zt, xtv, ytv, ztv)
то

суммаОсвещений := суммаОсвещений + (десЯркости(свет) * dot(xn, yn, zn, xtv, ytv, ztv) / (длинаВектора(xn, yn, zn) * длинаВектора(xtv, ytv, ztv)))
все
все
кц
знач := суммаОсвещений
кон

алг вещ освещенностьМодели(вещ xo, yo, zo, xv, yv, zv, xn, yn, zn, t)
нач

кон

алг лог точкаЗатенена(вещ x, y, z, xlv, ylv, zlv)
нач
вещ t, xn, yn, zn
лит фигур
цвет цв
знач := столкновениеЛучаСБлижайшейФигурой(x, y, z, xlv, ylv, zlv, 0.001, t, xn, yn, zn, фигур, цв) и t <> МАКСВЕЩ 
кон


|| Утилиты


алг вещ dot(вещ x1, y1, z1, x2, y2, z2)
нач
знач := x1 * x2 + y1 * y2 + z1 * z2
кон

алг cross(вещ x1, y1, z1, x2, y2, z2, рез вещ x, y, z)
нач
x := y1 * z2 - z1 * y2
y := z1 * x2 - x1 * z2
z := x1 * y2 - y1 * x2
кон

алг вещ длинаВектора(вещ x, y, z)
нач
знач := sqrt(x * x + y * y + z * z)
кон

алг нормализацияВектора(вещ x, y, z, рез вещ xn, yn, zn)
нач
вещ длина 
длина := длинаВектора(x, y, z)
xn := x / длина
yn := y / длина
zn := z / длина
кон

алг цел типФигуры(лит фигура)
нач
знач := лит_в_цел(фигура[1], _)
кон

алг положениеФигуры(лит фигура, рез вещ x, y, z)
нач
цел раздел
раздел := поз после(3, фигура, ";")
лит позиц
позиц := фигура[3:раздел-1]
десПозиции(позиц, x, y, z)
кон

алг вещ радиусСферы(лит сфер)
нач
цел раздел, раздел2
раздел := поз после(3, сфер, ";")
раздел2 := поз после(раздел + 1, сфер, ";")
знач := лит_в_вещ(сфер[раздел + 1:раздел2 - 1], _)
кон

алг цвет цветСферы(лит сфер)
нач
цел раздел
раздел := поз после(3, сфер, ";")
раздел := поз после(раздел + 1, сфер, ";")
знач := десЦвета(сфер[раздел + 1:длин(сфер)])
кон

алг десПозиции(лит позиц, рез вещ x, y, z)
нач
цел раздел, раздел2
раздел2 := поз(позиц, ",")
x := лит_в_вещ(позиц[1:раздел2 - 1], _)
раздел := раздел2
раздел2 := поз после(раздел + 1, позиц, ",")
y := лит_в_вещ(позиц[раздел+1:раздел2-1], _)
z := лит_в_вещ(позиц[раздел2+1:длин(позиц)], _)
кон

алг цвет десЦвета(лит цв)
нач
цел раздел, раздел2, r, g, b
раздел2 := поз(цв, ",")
r := лит_в_цел(цв[1:раздел2 - 1], _)
раздел := раздел2
раздел2 := поз после(раздел + 1, цв, ",")
g := лит_в_цел(цв[раздел+1:раздел2-1], _)
b := лит_в_цел(цв[раздел2+1:длин(цв)], _)
знач := RGB(r, g, b)
кон

алг цел десЯркости(лит ламп)
нач
цел раздел
раздел := поз после(3, ламп, ";")
знач := лит_в_цел(ламп[раздел+1:длин(ламп)], _)
кон

алг сфера(вещ x, y, z, радиус, цвет цв)
нач
лит сфер
цел r, g, b
разложить в RGB(цв, r, g, b)
сфер := "0;" + вещ_в_лит(x) + "," + вещ_в_лит(y) + "," + вещ_в_лит(z) + ";" + вещ_в_лит(радиус) + ";" + цел_в_лит(r) + "," + цел_в_лит(g) + "," + цел_в_лит(b)
добавитьФигуру(сфер)
кон

алг лампа(вещ x, y, z, цел яркость)
нач
лит ламп
ламп := "1;" + вещ_в_лит(x) + "," + вещ_в_лит(y) + "," + вещ_в_лит(z) + ";" + цел_в_лит(яркость)
добавитьФигуру(ламп)
естьОсвещение := да
кон

алг плоскость(вещ таб точки[0:4,0:3]) || НЕ ИСПОЛЬЗОВАТЬ! НЕ РАБОТАЕТ!
нач
цел i
лит плоск
плоск := "2;["
нц для i от 0 до 4
плоск := плоск + "[" + вещ_в_лит(точки[i,0]) + "," + вещ_в_лит(точки[i, 1]) + "," + вещ_в_лит(точки[i,2]) + "]"
если i <> 4 то
плоск := плоск + ","
все
кц
плоск := плоск + "]"
добавитьФигуру(плоск)
кон

алг objМодель(лит путьКФайлу, вещ ox, oy, oz)
нач
лит таб нормали[0:9999]
лит таб вершины[0:9999]
лит таб полигоны[0:9999]
лит temp
файл модель
цел раздел, раздел2
цел колНормалей, колВершин, колПолигонов

колНормалей := 0
колВершин := 0
колПолигонов := 0

если не можно открыть на чтение(путьКФайлу)
то
вывод "НЕ НАЙДЕН ФАЙЛ МОДЕЛИ '", путьКФайлу, "'", нс
выход
все
модель := открыть на чтение(путьКФайлу)
нц пока есть данные(модель)
ввод модель, temp
если temp[1:2] = "vn"
то
нормали[колНормалей] := десСтрокиМодели(temp[4:длин(temp)])
колНормалей := колНормалей + 1
все

если temp[1:2] = "v " 
то
вершины[колВершин] := десСтрокиМодели(temp[3:длин(temp)])
колВершин := колВершин + 1
все

если temp[1:2] = "f " то
полигоны[колПолигонов] := десСтрокиМодели(temp[3:длин(temp)])
колПолигонов := колПолигонов + 1
все
кц
закрыть(модель)

если полигоны[0] = "" 
то
вывод "ОШИБКА ЗАГРУЗКИ МОДЕЛИ (нет полигонов)", нс
выход
все

если вершины[0] = ""
то
вывод "ОШИБКА ЗАРГУЗКИ МОДЕЛИ (нет вершин)", нс
выход
все

лит моделПолигоны = ";"
лит полигон

цел иПолигонов = 1 
цел вершина, нормаль

вещ x1n, x2n, x3n, y1n, y2n, y3n, z1n, z2n, z3n, x, y, z

нц для иПолигонов от 0 до колПолигонов - 1
полигон := полигоны[иПолигонов]
вершина := 0
нормаль := 0

раздел := 1
раздел2 := поз(полигон, ",") - 1

десВершиныПолигона(полигон[раздел:раздел2], вершина, нормаль)

вершина := вершина

десПозиции(вершины[вершина - 1], x, y, z)
если нормаль <> 0
то
десПозиции(нормали[нормаль - 1], x1n, y1n, z1n)
иначе
x1n := 0
y1n := 1
z1n := 0
все

моделПолигоны := моделПолигоны + "[" + ввл(x) + "," + ввл(y) + "," + ввл(z) + ","

раздел := раздел2 + 2
раздел2 := поз после(раздел, полигон, ",") - 1
десВершиныПолигона(полигон[раздел:раздел2], вершина, нормаль)

десПозиции(вершины[вершина - 1], x, y, z)
если нормаль <> 0
то
десПозиции(нормали[нормаль - 1], x1n, y1n, z1n)
иначе
x2n := 0
y2n := 1
z2n := 0
все

моделПолигоны := моделПолигоны + ввл(x) + "," + ввл(y) + "," + ввл(z) + ","

раздел := раздел2 + 2
раздел2 := длин(полигон)
десВершиныПолигона(полигон[раздел:раздел2], вершина, нормаль)

десПозиции(вершины[вершина - 1], x, y, z)
если нормаль <> 0
то
десПозиции(нормали[нормаль - 1], x1n, y1n, z1n)
иначе
x3n := 0
y3n := 1
z3n := 0
все

моделПолигоны := моделПолигоны + ввл(x) + "," + ввл(y) + "," + ввл(z) + ","
моделПолигоны := моделПолигоны + ввл((x1n + x2n + x3n) / 3) + "," + ввл((y1n + y2n + y3n) / 3) + "," + ввл((z1n + z2n + z3n) / 3) + "]"

если иПолигонов <> колПолигонов - 1
то
моделПолигоны := моделПолигоны + ","
все
кц

добавитьФигуру("2;" + ввл(ox) + "," + ввл(oy) + "," + ввл(oz) + ";" + цвл(колПолигонов) + моделПолигоны)
кон

алг десВершиныПолигона(лит полигон, аргрез цел индексВершины, индексНормали)
нач
цел позНормали, позТекстуры
позТекстуры := поз(полигон, "/")
позНормали := поз после(позТекстуры + 1, полигон, "/")

если позТекстуры = 0
то
индексВершины := лит_в_цел(полигон, _)
выход
все

если позНормали = 0
то
индексВершины := лит_в_цел(полигон[1:позТекстуры - 1], _)
выход
все

индексВершины := лит_в_цел(полигон[1:позТекстуры - 1], _)
индексНормали := лит_в_цел(полигон[позНормали + 1:длин(полигон)], _)
кон 

алг лит десСтрокиМодели(арг лит откуда)
нач
цел раздел, раздел2
лит куда = ""
раздел := поз(откуда, " ") + 1
раздел2 := поз после(раздел, откуда, " ") - 1

куда := откуда[1:раздел - 2]
куда := куда + "," + откуда[раздел:раздел2]
раздел := раздел2 + 2
если раздел2 >= длин(откуда) - 1 | если есть лишние значения 
то
раздел2 := длин(откуда) - 1
если откуда[раздел2] = " " то раздел2 := раздел2 - 1 все
иначе
раздел2 := поз после(раздел, откуда, " ") - 1
все
куда := куда + "," + откуда[раздел:раздел2]

знач := куда
кон

алг цел поз(лит строка, лит фрагмент)
нач
цел i, j
лог найдено = нет
нц для i от 1 до длин(строка)
если строка[i] = фрагмент[1] то
нц для j от 1 до длин(фрагмент)
если строка[i + j - 1] = фрагмент[j] то
если j = длин(фрагмент) то
найдено := да
знач := i
все
иначе выход
все
кц
если найдено то выход все
все
кц
если не найдено то знач := 0 все
кон

алг цел поз после(цел начало, лит строка, лит фрагмент)
нач
знач := начало + поз(строка[начало:длин(строка)], фрагмент) - 1
кон

алг цел поз подряд(цел разПодряд, лит строка, лит фрагмент)
нач
цел i, позиция
позиция := 1
нц для i от 0 до разПодряд
позиция := поз после(позиция + 1, строка, фрагмент)
если позиция = 0
то
знач := 0
выход
все
кц
знач := позиция
кон

алг цвет умнЦвет(цвет цв, вещ множитель)
нач
цел r, g, b
разложить в RGB(цв, r, g, b)
r := int(r * множитель)
g := int(g * множитель)
b := int(b * множитель)
знач := RGB(r, g, b)
кон

алг цвет умнЦвет2(цвет цв, вещ множитель)
нач
цел h, s, v
разложить в HSV(цв, h, s, v)
v := int(v * множитель)
знач := HSV(h, s, v)
кон

алг добавитьФигуру(лит фигура)
нач
числоФигур := числоФигур + 1
фигуры[числоФигур -  1] := фигура
кон

алг лит ввл(вещ числ)
нач
знач := вещ_в_лит(числ)
кон

алг лит цвл(цел числ)
нач
знач := цел_в_лит(числ)
кон

алг вещ лвв(лит числ)
нач
знач := лит_в_вещ(числ, _)
кон

алг цел лвц(лит числ)
нач
знач := лит_в_цел(числ, _)
кон













































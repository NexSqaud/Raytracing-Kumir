использовать Рисователь

| удаление значения
лог _

|| Настройки

цел количествоСтрокМеждуПрогрессом = 100

| настройки холста
цел ширина = 1920
цел высота = 1080

| настройки плоскости проекции
вещ ширинаПлПр = 1.6
вещ высотаПлПр = 0.9
вещ расстояниеДоПлПр = 1

| настройки рендера
цвет цветДоРендера; цветДоРендера := серый
цвет цветФона; цветФона := черный 

| максимальное количество фигур на сцене (с учетом источников света)
цел максимумФигур = 500

| Ambient освещение, уровень минимального освещения
вещ общееОсвещение = 15

| Runtime-переменные  
лит таб фигуры[0:максимумФигур]
лог естьОсвещение = нет
цел числоФигур = 0

алг
нач
новый лист(ширина, высота, цветДоРендера)

цел врем
врем := время

| настройка сцены
| сумма всех освещений не должна превышать 100 (с учетом ambient)

сфера(0, 0, 5, 2, серый)
сфера(-0.5, -2, 5, 1, зеленый)
сфера(5, -1, 10, 2, белый)
сфера(0, 6001, 10, 6000, красный) | выступает в качестве пола

лампа(5, -5, -1, 35)
лампа(-5, -5, -1, 50)

| рендеринг

цел x, y, врем2
нц для y от 0 до высота
нц для x от 0 до ширина
выпуститьЛуч(x, y)
если mod(y, количествоСтрокМеждуПрогрессом) = 0 и x = 0 то
врем2 := время
вывод "Рендеринг ", y ," строк занял: ", врем2 - врем, " мс (", int((врем2 - врем) / 1000), " с)", нс
все
кц
кц

цел времяВсего
врем2 := время
времяВсего := врем2 - врем

вывод "Рендеринг занял: ", времяВсего, " мс (", int(времяВсего / 1000), " с)", нс

кон

алг выпуститьЛуч(цел x, y)
нач
вещ xv, yv, zv, xc, yc, zc, t
цвет цв
лит сфер
xv := ((x - ширина / 2) * ширинаПлПр / ширина)
yv := ((y - высота / 2) * высотаПлПр / высота)
zv := расстояниеДоПлПр
нормализацияВектора(xv, yv, zv, xv, yv, zv)
t := 0
если столкновениеЛучаСБлижайшейСферой(0, 0, 0, xv, yv, zv, 0.001, t, сфер, цв)
то
если естьОсвещение то
положениеФигуры(сфер, xc, yc, zc)
цв := умнЦвет(цв, освещенностьСферы(0, 0, 0, xv, yv, zv, xc, yc, zc, t) / 100)
все
пиксель(x, y, цв)
иначе
пиксель(x, y, цветФона)
все
кон

алг лог столкновениеЛучаСБлижайшейСферой(вещ xo, yo, zo, xv, yv, zv, tmin, рез вещ t, рез лит сфер, рез цвет цв)
нач
вещ tTemp
цел i, тип
лит сферTemp
t := МАКСВЕЩ
знач := нет
нц для i от 0 до числоФигур - 1
сферTemp := фигуры[i]
тип := типФигуры(сферTemp)
если тип = 0 то
если столкновениеСоСферой(сферTemp, xv, yv, zv, xo, yo, zo, tmin, tTemp) то
если tTemp < t и tTemp > tmin то
t := tTemp
сфер := сферTemp
цв := цветСферы(сферTemp)
знач := да
все
все
все
кц

кон

алг лог столкновениеСоСферой(лит сфер, вещ xv, yv, zv, xo, yo, zo, tmin, рез вещ t)
нач
вещ xc, yc, zc, xoc, yoc, zoc, k1, k2, k3, d, t1, радиус
радиус := радиусСферы(сфер)
положениеФигуры(сфер, xc, yc, zc)

xoc := xo - xc
yoc := yo - yc;
zoc := zo - zc

k1 := dot(xv, yv, zv, xv, yv, zv)
k2 := 2 * dot(xoc, yoc, zoc, xv, yv, zv)
k3 := dot(xoc, yoc, zoc, xoc, yoc, zoc) - радиус * радиус

d := k2 * k2 - 4 * k1 * k3
если d < 0 то
знач := нет
выход
все

t := (-k2 + sqrt(d)) / (2 * k1)
t1 := (-k2 - sqrt(d)) / (2 * k1)
если t1 < t и t1 > tmin то t := t1 все

знач := да
кон

алг вещ освещенностьСферы(вещ xo, yo, zo, xv, yv, zv, xc, yc, zc, t)
нач
вещ xt, yt, zt, xtv, ytv, ztv, xn, yn, zn, xl, yl, zl, суммаОсвещений
цел i
лит свет

суммаОсвещений := общееОсвещение

xt := xo + (xv * t)
yt := yo + (yv * t)
zt := zo + (zv * t)

xn := xt - xc
yn := yt-yc;
zn := zt - zc
нормализацияВектора(xn, yn, zn, xn, yn, zn)

нц для i от 0 до числоФигур - 1
свет := фигуры[i]
если типФигуры(свет) = 1 то
положениеФигуры(свет, xl, yl, zl)
xtv := xl - xt
ytv := yl - yt;
ztv := zl - zt
нормализацияВектора(xtv, ytv, ztv, xtv, ytv, ztv)

если не точкаЗатенена(xt, yt, zt, xtv, ytv, ztv)
то

суммаОсвещений := суммаОсвещений + (десЯркости(свет) * dot(xn, yn, zn, xtv, ytv, ztv) / (длинаВектора(xn, yn, zn) * длинаВектора(xtv, ytv, ztv)))
все
все
кц
знач := суммаОсвещений
кон

алг лог точкаЗатенена(вещ x, y, z, xlv, ylv, zlv)
нач
вещ t
лит сфер
цвет цв
знач := столкновениеЛучаСБлижайшейСферой(x, y, z, xlv, ylv, zlv, 0.001, t, сфер, цв) и t <> МАКСВЕЩ 
кон


|| Утилиты


алг вещ dot(вещ x1, y1, z1, x2, y2, z2)
нач
знач := x1 * x2 + y1 * y2 + z1 * z2
кон

алг вещ длинаВектора(вещ x, y, z)
нач
знач := sqrt(x * x + y * y + z * z)
кон

алг нормализацияВектора(вещ x, y, z, рез вещ xn, yn, zn)
нач
вещ длина 
длина := длинаВектора(x, y, z)
xn := x / длина
yn := y / длина
zn := z / длина
кон

алг цел типФигуры(лит фигура)
нач
знач := лит_в_цел(фигура[1], _)
кон

алг положениеФигуры(лит фигура, рез вещ x, y, z)
нач
цел раздел
раздел := поз после(3, фигура, ";")
лит позиц
позиц := фигура[3:раздел-1]
десПозиции(позиц, x, y, z)
кон

алг вещ радиусСферы(лит сфер)
нач
цел раздел, раздел2
раздел := поз после(3, сфер, ";")
раздел2 := поз после(раздел + 1, сфер, ";")
знач := лит_в_вещ(сфер[раздел + 1:раздел2 - 1], _)
кон

алг цвет цветСферы(лит сфер)
нач
цел раздел
раздел := поз после(3, сфер, ";")
раздел := поз после(раздел + 1, сфер, ";")
знач := десЦвета(сфер[раздел + 1:длин(сфер)])
кон

алг десПозиции(лит позиц, рез вещ x, y, z)
нач
цел раздел, раздел2
раздел2 := поз(позиц, ",")
x := лит_в_вещ(позиц[1:раздел2 - 1], _)
раздел := раздел2
раздел2 := поз после(раздел + 1, позиц, ",")
y := лит_в_вещ(позиц[раздел+1:раздел2-1], _)
z := лит_в_вещ(позиц[раздел2+1:длин(позиц)], _)
кон

алг цвет десЦвета(лит цв)
нач
цел раздел, раздел2, r, g, b
раздел2 := поз(цв, ",")
r := лит_в_цел(цв[1:раздел2 - 1], _)
раздел := раздел2
раздел2 := поз после(раздел + 1, цв, ",")
g := лит_в_цел(цв[раздел+1:раздел2-1], _)
b := лит_в_цел(цв[раздел2+1:длин(цв)], _)
знач := RGB(r, g, b)
кон

алг цел десЯркости(лит ламп)
нач
цел раздел
раздел := поз после(3, ламп, ";")
знач := лит_в_цел(ламп[раздел+1:длин(ламп)], _)
кон

алг сфера(вещ x, y, z, радиус, цвет цв)
нач
лит сфер
цел r, g, b
разложить в RGB(цв, r, g, b)
сфер := "0;" + вещ_в_лит(x) + "," + вещ_в_лит(y) + "," + вещ_в_лит(z) + ";" + вещ_в_лит(радиус) + ";" + цел_в_лит(r) + "," + цел_в_лит(g) + "," + цел_в_лит(b)
числоФигур := числоФигур + 1
фигуры[числоФигур - 1] := сфер
кон

алг лампа(вещ x, y, z, цел яркость)
нач
лит ламп
ламп := "1;" + вещ_в_лит(x) + "," + вещ_в_лит(y) + "," + вещ_в_лит(z) + ";" + цел_в_лит(яркость)
числоФигур := числоФигур + 1
фигуры[числоФигур -  1] := ламп
естьОсвещение := да
кон

алг цел поз(лит строка, лит фрагмент)
нач
цел i, j
лог найдено = нет
нц для i от 1 до длин(строка)
если строка[i] = фрагмент[1] то
нц для j от 1 до длин(фрагмент)
если строка[i + j - 1] = фрагмент[j] то
если j = длин(фрагмент) то
найдено := да
знач := i
все
иначе выход
все
кц
если найдено то выход все
все
кц
если не найдено то знач := 0 все
кон

алг цел поз после(цел начало, лит строка, лит фрагмент)
нач
знач := начало + поз(строка[начало:длин(строка)], фрагмент) - 1
кон

алг цвет умнЦвет(цвет цв, вещ множитель)
нач
цел r, g, b
разложить в RGB(цв, r, g, b)
r := int(r * множитель)
g := int(g * множитель)
b := int(b * множитель)
знач := RGB(r, g, b)
кон

алг цвет умнЦвет2(цвет цв, вещ множитель)
нач
цел h, s, v
разложить в HSV(цв, h, s, v)
v := int(v * множитель)
знач := HSV(h, s, v)
кон





































